plotData <- data.frame(perPlot)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#000000")
ggplot(plotData, aes(x = plotData$V1, y = plotData$V2), colors(distinct = TRUE)) + geom_point(aes(colour = factor(b.cluster), group = b.cluster))
b= dbscan(a,eps=0.3, minPts = 20 )
xAndY <- a
perPlot <- cbind(a,b$cluster)
plotData <- data.frame(perPlot)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#000000")
ggplot(plotData, aes(x = plotData$V1, y = plotData$V2), colors(distinct = TRUE)) + geom_point(aes(colour = factor(b.cluster), group = b.cluster))
b= dbscan(a,eps=0.4, minPts = 20 )
xAndY <- a
perPlot <- cbind(a,b$cluster)
plotData <- data.frame(perPlot)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#000000")
ggplot(plotData, aes(x = plotData$V1, y = plotData$V2), colors(distinct = TRUE)) + geom_point(aes(colour = factor(b.cluster), group = b.cluster))
b= dbscan(a,eps=0.35, minPts = 20 )
xAndY <- a
perPlot <- cbind(a,b$cluster)
plotData <- data.frame(perPlot)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#000000")
ggplot(plotData, aes(x = plotData$V1, y = plotData$V2), colors(distinct = TRUE)) + geom_point(aes(colour = factor(b.cluster), group = b.cluster))
b= dbscan(a,eps=0.33, minPts = 20 )
xAndY <- a
perPlot <- cbind(a,b$cluster)
plotData <- data.frame(perPlot)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#000000")
ggplot(plotData, aes(x = plotData$V1, y = plotData$V2), colors(distinct = TRUE)) + geom_point(aes(colour = factor(b.cluster), group = b.cluster))
b= dbscan(a,eps=0.32, minPts = 20 )
xAndY <- a
perPlot <- cbind(a,b$cluster)
plotData <- data.frame(perPlot)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#000000")
ggplot(plotData, aes(x = plotData$V1, y = plotData$V2), colors(distinct = TRUE)) + geom_point(aes(colour = factor(b.cluster), group = b.cluster))
b= dbscan(a,eps=0.31, minPts = 20 )
xAndY <- a
perPlot <- cbind(a,b$cluster)
plotData <- data.frame(perPlot)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#000000")
ggplot(plotData, aes(x = plotData$V1, y = plotData$V2), colors(distinct = TRUE)) + geom_point(aes(colour = factor(b.cluster), group = b.cluster))
b= dbscan(a,eps=0.305, minPts = 20 )
xAndY <- a
perPlot <- cbind(a,b$cluster)
plotData <- data.frame(perPlot)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#000000")
ggplot(plotData, aes(x = plotData$V1, y = plotData$V2), colors(distinct = TRUE)) + geom_point(aes(colour = factor(b.cluster), group = b.cluster))
b= dbscan(a,eps=0.305, minPts = 18 )
xAndY <- a
perPlot <- cbind(a,b$cluster)
plotData <- data.frame(perPlot)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#000000")
ggplot(plotData, aes(x = plotData$V1, y = plotData$V2), colors(distinct = TRUE)) + geom_point(aes(colour = factor(b.cluster), group = b.cluster))
b= dbscan(a,eps=0.31, minPts = 18 )
xAndY <- a
perPlot <- cbind(a,b$cluster)
plotData <- data.frame(perPlot)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#000000")
ggplot(plotData, aes(x = plotData$V1, y = plotData$V2), colors(distinct = TRUE)) + geom_point(aes(colour = factor(b.cluster), group = b.cluster))
b= dbscan(a,eps=0.04, minPts = 5 )
xAndY <- a
perPlot <- cbind(a,b$cluster)
plotData <- data.frame(perPlot)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#000000")
ggplot(plotData, aes(x = plotData$V1, y = plotData$V2), colors(distinct = TRUE)) + geom_point(aes(colour = factor(b.cluster), group = b.cluster))
b= dbscan(a,eps=0.4, minPts = 5 )
xAndY <- a
perPlot <- cbind(a,b$cluster)
plotData <- data.frame(perPlot)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#000000")
ggplot(plotData, aes(x = plotData$V1, y = plotData$V2), colors(distinct = TRUE)) + geom_point(aes(colour = factor(b.cluster), group = b.cluster))
b= dbscan(a,eps=0.4, minPts = 5 )
xAndY <- a
perPlot <- cbind(a,b$cluster)
plotData <- data.frame(perPlot)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#000000")
ggplot(plotData, aes(x = plotData$V1, y = plotData$V2), colors(distinct = TRUE)) + geom_point(aes(colour = factor(b.cluster), group = b.cluster))
b= dbscan(a,eps=0.1, minPts = 5 )
xAndY <- a
perPlot <- cbind(a,b$cluster)
plotData <- data.frame(perPlot)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#000000")
ggplot(plotData, aes(x = plotData$V1, y = plotData$V2), colors(distinct = TRUE)) + geom_point(aes(colour = factor(b.cluster), group = b.cluster))
b= dbscan(a,eps=0.2, minPts = 5 )
xAndY <- a
perPlot <- cbind(a,b$cluster)
plotData <- data.frame(perPlot)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#000000")
ggplot(plotData, aes(x = plotData$V1, y = plotData$V2), colors(distinct = TRUE)) + geom_point(aes(colour = factor(b.cluster), group = b.cluster))
b= dbscan(a,eps=0.3, minPts = 5 )
xAndY <- a
perPlot <- cbind(a,b$cluster)
plotData <- data.frame(perPlot)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#000000")
ggplot(plotData, aes(x = plotData$V1, y = plotData$V2), colors(distinct = TRUE)) + geom_point(aes(colour = factor(b.cluster), group = b.cluster))
b= dbscan(a,eps=0.25, minPts = 5 )
xAndY <- a
perPlot <- cbind(a,b$cluster)
plotData <- data.frame(perPlot)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#000000")
ggplot(plotData, aes(x = plotData$V1, y = plotData$V2), colors(distinct = TRUE)) + geom_point(aes(colour = factor(b.cluster), group = b.cluster))
b= dbscan(a,eps=0.31, minPts = 20 )
xAndY <- a
perPlot <- cbind(a,b$cluster)
plotData <- data.frame(perPlot)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#000000")
ggplot(plotData, aes(x = plotData$V1, y = plotData$V2), colors(distinct = TRUE)) + geom_point(aes(colour = factor(b.cluster), group = b.cluster))
sample(100,10, replace = TRUE)
x = list(1:100)
x = list(1:100)
sample(x[lapply(x, "%%", 2) == 0],10, replace = TRUE)
x[lapply(x, "%%", 2) == 0]
lapply(x, "%%", 2) == 0
sample(x,10, replace = TRUE)
x = list(1:100)
x
sample(x,10, replace = TRUE)
sample(x,1)
x = c(1:100)
sample(x,1)
sample(x[lapply(x, "%%", 2) == 0],10, replace = TRUE)
sample(x[lapply(x, "%%", 2) == 0],10, replace = FALSE)
sample(x[lapply(x, "%%", 2) == 0],10)
library("ggplot2")
library("BBmisc")
library("dbscan")
setwd("/home/benjamin/ISDBSCAN/data")
countStroke = read.table(file = "/home/benjamin/ISDBSCAN/data/countMirTarBase.csv",header = FALSE, sep = "\t")
tcountStroke = t(countStroke)
tcountStroke <- data.frame(apply(tcountStroke, 2, function(x) as.numeric(as.character(x))))
tcountStroke <- normalize(tcountStroke, method = "standardize",range = c(0, 1))
tcountStroke.pca <- prcomp(tcountStroke)
x=tcountStroke.pca$x[,1]
y=tcountStroke.pca$x[,2]
forClustering <- data.frame(cbind(x,y))
prova <- dbscan(forClustering, eps = 10, minPts = 3)
write.table(forClustering,file = "strokeMirTarBaseForCluster.txt", append = FALSE, sep = "\t", dec = ".", row.names = FALSE, col.names = FALSE, quote=FALSE )
perPlot2 <- cbind(forClustering,prova$cluster)
plotData2 <- data.frame(perPlot2)
ggplot(plotData2, aes(x = plotData2$V1, y = plotData2$V2), colors(distinct = TRUE)) + geom_point(aes(colour = factor(V3), group = V3))
head(plotData2)
ggplot(plotData2, aes(x = plotData2$V1, y = plotData2$V2), colors(distinct = TRUE)) + geom_point(aes(colour = factor(prova.cluster), group = prova.cluster))
ggplot(plotData2, aes(x = plotData2$x, y = plotData2$y), colors(distinct = TRUE)) + geom_point(aes(colour = factor(prova.cluster), group = prova.cluster))
b = ISDBSCAN(forClustering, k=5)
forClustering <- as.matrix(cbind(x,y))
b = ISDBSCAN(forClustering, k=5)
plotData2 <- data.frame(perPlot2)
ggplot(plotData2, aes(x = plotData2$x, y = plotData2$y), colors(distinct = TRUE)) + geom_point(aes(colour = factor(b.cluster), group = b.cluster))
ggplot(plotData2, aes(x = plotData2$x, y = plotData2$y), colors(distinct = TRUE)) + geom_point(aes(colour = factor(b.clusters), group = b.clusters))
View(plotData2)
b = ISDBSCAN(forClustering, k=5)
perPlot2 <- cbind(forClustering,b$clusters)
plotData2 <- data.frame(perPlot2)
ggplot(plotData2, aes(x = plotData2$x, y = plotData2$y), colors(distinct = TRUE)) + geom_point(aes(colour = factor(b.clusters), group = b.clusters))
View(perPlot2)
plotData2 <- data.frame(perPlot2)
View(plotData2)
ggplot(plotData2, aes(x = plotData2$x, y = plotData2$y), colors(distinct = TRUE)) + geom_point(aes(colour = factor(V3), group = V3))
b = ISDBSCAN(forClustering, k=3)
perPlot2 <- cbind(forClustering,b$clusters)
plotData2 <- data.frame(perPlot2)
b = ISDBSCAN(forClustering, k=3)
perPlot2 <- cbind(forClustering,b$clusters)
b = ISDBSCAN(forClustering, k=3)
b = ISDBSCAN(forClustering, k=3)
b = ISDBSCAN(forClustering, k=3)
perPlot2 <- cbind(forClustering,b$clusters)
plotData2 <- data.frame(perPlot2)
ggplot(plotData2, aes(x = plotData2$x, y = plotData2$y), colors(distinct = TRUE)) + geom_point(aes(colour = factor(V3), group = V3))
ggplot(plotData2, aes(x = plotData2$y, y = plotData2$x), colors(distinct = TRUE)) + geom_point(aes(colour = factor(V3), group = V3))
prova <- dbscan(forClustering, eps = 9, minPts = 3)
perPlot2 <- cbind(forClustering,prova$cluster)
plotData2 <- data.frame(perPlot2)
perPlot2 <- cbind(forClustering,prova$cluster)
ggplot(plotData2, aes(x = plotData2$x, y = plotData2$y), colors(distinct = TRUE)) + geom_point(aes(colour = factor(prova.cluster), group = prova.cluster))
View(plotData2)
ggplot(plotData2, aes(x = plotData2$x, y = plotData2$y), colors(distinct = TRUE)) + geom_point(aes(colour = factor(V3), group = V3))
ggplot(plotData2, aes(x = plotData2$y, y = plotData2$x), colors(distinct = TRUE)) + geom_point(aes(colour = factor(V3), group = V3))
countStroke= cbind(tcountStroke, sampleCondition)
sampleCondition = c("healthy","healthy","healthy","healthy","healthy","trt","trt","trt","trt","trt","untrt","untrt","untrt")
countStroke= cbind(tcountStroke, sampleCondition)
sampleCondition = c("healthy","healthy","healthy","healthy","healthy","trt","trt","trt","trt","trt","trt","untrt","untrt","untrt","untrt")
countStroke= cbind(tcountStroke, sampleCondition)
sampleCondition = c("healthy","healthy","healthy","healthy","healthy","healthy","trt","trt","trt","trt","trt","trt","untrt","untrt","untrt","untrt","untrt")
countStroke= cbind(tcountStroke, sampleCondition)
View(countStroke)
rownames(tcountStroke) <- sampleCondition
countStroke= cbind(sampleCondition, tcountStroke )
View(countStroke)
perPlot2 <- cbind(forClustering,prova$cluster,sampleCondition)
plotData2 <- data.frame(perPlot2)
ggplot(plotData2, aes(x = plotData2$y, y = plotData2$x), colors(distinct = TRUE)) + geom_point(aes(colour = factor(V3), group = V3))
sampleCondition = c("healthy","healthy","healthy","healthy","healthy","healthy","trt","trt","trt","trt","trt","trt","untrt","untrt","untrt","untrt","untrt")
countStroke = read.table(file = "/home/benjamin/ISDBSCAN/data/countMirTarBase.csv",header = FALSE, sep = "\t")
tcountStroke = t(countStroke)
countStroke= cbind(sampleCondition, tcountStroke )
tcountStroke <- data.frame(apply(tcountStroke, 2, function(x) as.numeric(as.character(x))))
tcountStroke <- normalize(tcountStroke, method = "standardize",range = c(0, 1))
tcountStroke.pca <- prcomp(tcountStroke)
x=tcountStroke.pca$x[,1]
y=tcountStroke.pca$x[,2]
forClustering <- data.frame(cbind(x,y))
prova <- dbscan(forClustering, eps = 9, minPts = 3)
perPlot2 <- cbind(forClustering,prova$cluster,sampleCondition)
plotData2 <- data.frame(perPlot2)
ggplot(plotData2, aes(x = plotData2$y, y = plotData2$x), colors(distinct = TRUE)) + geom_point(aes(colour = factor(V3), group = V3))
View(plotData2)
ggplot(plotData2, aes(x = plotData2$y, y = plotData2$x), colors(distinct = TRUE)) + geom_point(aes(colour = factor(prova.cluster), group = prova.cluster))
ggplot(plotData2, aes(x = plotData2$y, y = plotData2$x), colors(distinct = TRUE), label = plotData2$sampleCondition) + geom_point(aes(colour = factor(prova.cluster), group = prova.cluster)) +geom_text()
ggplot(plotData2, aes(x = plotData2$y, y = plotData2$x), colors(distinct = TRUE), label = plotData2$sampleCondition) + geom_point(aes(colour = factor(prova.cluster), group = prova.cluster)) +geom_text(label = plotData2$sampleCondition)
ggplot(plotData2, aes(x = plotData2$y, y = plotData2$x), colors(distinct = TRUE), label = plotData2$sampleCondition) + geom_point(aes(colour = factor(prova.cluster), group = prova.cluster)) +geom_text(label = plotData2$sampleCondition, check_overlap = TRUE)
ggplot(plotData2, aes(x = plotData2$y, y = plotData2$x), colors(distinct = TRUE), label = plotData2$sampleCondition) + geom_point(aes(colour = factor(prova.cluster), group = prova.cluster)) +geom_text(label = plotData2$sampleCondition, check_overlap = TRUE, hjust = 0, nudge_x = 0.05)
ggplot(plotData2, aes(x = plotData2$y, y = plotData2$x), colors(distinct = TRUE), label = plotData2$sampleCondition) + geom_point(aes(colour = factor(prova.cluster), group = prova.cluster)) +geom_text(label = plotData2$sampleCondition, check_overlap = TRUE, hjust = 0, nudge_x = 0.05, angle =45)
ggplot(plotData2, aes(x = plotData2$x, y = plotData2$y), colors(distinct = TRUE), label = plotData2$sampleCondition) + geom_point(aes(colour = factor(prova.cluster), group = prova.cluster)) +geom_text(label = plotData2$sampleCondition, check_overlap = TRUE, hjust = 0, nudge_x = 0.05, angle =45)
View(plotData2)
prova <- dbscan(forClustering, eps = 9, minPts = 2)
perPlot2 <- cbind(forClustering,prova$cluster,sampleCondition)
plotData2 <- data.frame(perPlot2)
ggplot(plotData2, aes(x = plotData2$x, y = plotData2$y), colors(distinct = TRUE), label = plotData2$sampleCondition) + geom_point(aes(colour = factor(prova.cluster), group = prova.cluster)) +geom_text(label = plotData2$sampleCondition, check_overlap = TRUE, hjust = 0, nudge_x = 0.05, angle =45)
prova <- dbscan(forClustering, eps = 9, minPts = 4)
perPlot2 <- cbind(forClustering,prova$cluster,sampleCondition)
plotData2 <- data.frame(perPlot2)
ggplot(plotData2, aes(x = plotData2$x, y = plotData2$y), colors(distinct = TRUE), label = plotData2$sampleCondition) + geom_point(aes(colour = factor(prova.cluster), group = prova.cluster)) +geom_text(label = plotData2$sampleCondition, check_overlap = TRUE, hjust = 0, nudge_x = 0.05, angle =45)
prova <- dbscan(forClustering, eps = 5, minPts = 4)
perPlot2 <- cbind(forClustering,prova$cluster,sampleCondition)
plotData2 <- data.frame(perPlot2)
ggplot(plotData2, aes(x = plotData2$x, y = plotData2$y), colors(distinct = TRUE), label = plotData2$sampleCondition) + geom_point(aes(colour = factor(prova.cluster), group = prova.cluster)) +geom_text(label = plotData2$sampleCondition, check_overlap = TRUE, hjust = 0, nudge_x = 0.05, angle =45)
prova <- dbscan(forClustering, eps = 15, minPts = 4)
perPlot2 <- cbind(forClustering,prova$cluster,sampleCondition)
plotData2 <- data.frame(perPlot2)
ggplot(plotData2, aes(x = plotData2$x, y = plotData2$y), colors(distinct = TRUE), label = plotData2$sampleCondition) + geom_point(aes(colour = factor(prova.cluster), group = prova.cluster)) +geom_text(label = plotData2$sampleCondition, check_overlap = TRUE, hjust = 0, nudge_x = 0.05, angle =45)
prova <- dbscan(forClustering, eps = 10, minPts = 4)
perPlot2 <- cbind(forClustering,prova$cluster,sampleCondition)
plotData2 <- data.frame(perPlot2)
ggplot(plotData2, aes(x = plotData2$x, y = plotData2$y), colors(distinct = TRUE), label = plotData2$sampleCondition) + geom_point(aes(colour = factor(prova.cluster), group = prova.cluster)) +geom_text(label = plotData2$sampleCondition, check_overlap = TRUE, hjust = 0, nudge_x = 0.05, angle =45)
prova <- dbscan(forClustering, eps = 10, minPts = 3)
perPlot2 <- cbind(forClustering,prova$cluster,sampleCondition)
plotData2 <- data.frame(perPlot2)
ggplot(plotData2, aes(x = plotData2$x, y = plotData2$y), colors(distinct = TRUE), label = plotData2$sampleCondition) + geom_point(aes(colour = factor(prova.cluster), group = prova.cluster)) +geom_text(label = plotData2$sampleCondition, check_overlap = TRUE, hjust = 0, nudge_x = 0.05, angle =45)
b = ISDBSCAN(forClustering, k=3)
forClustering <- as.matrix(cbind(x,y))
b = ISDBSCAN(forClustering, k=3)
b = ISDBSCAN(forClustering, k=3)
b = ISDBSCAN(forClustering, k=3)
perPlot2 <- cbind(forClustering,b$clusters,sampleCondition)
plotData3 <- data.frame(perPlot2)
ggplot(plotData3, aes(x = plotData3$y, y = plotData3$x), colors(distinct = TRUE), label = plotData3$sampleCondition) + geom_point(aes(colour = factor(V3), group = V3)) + geom_text(label = plotData2$sampleCondition, check_overlap = TRUE, hjust = 0, nudge_x = 0.05, angle =45)
ggplot(plotData3, aes(x = plotData3$x, y = plotData3$y), colors(distinct = TRUE), label = plotData3$sampleCondition) + geom_point(aes(colour = factor(V3), group = V3)) + geom_text(label = plotData2$sampleCondition, check_overlap = TRUE, hjust = 0, nudge_x = 0.05, angle =45)
View(plotData2)
View(plotData3)
ggplot(plotData2, aes(x = plotData2$x, y = plotData2$y), colors(distinct = TRUE), label = plotData2$sampleCondition) + geom_point(aes(colour = factor(prova.cluster), group = prova.cluster)) +geom_text(label = plotData2$sampleCondition, check_overlap = TRUE, hjust = 0, nudge_x = 0.05, angle =45)
ggplot(plotData3, aes(x = plotData3$x, y = plotData3$y), colors(distinct = TRUE), label = plotData3$sampleCondition) + geom_point(aes(colour = factor(V3), group = V3)) + geom_text(label = plotData2$sampleCondition, check_overlap = TRUE, hjust = 0, nudge_x = 0.05, angle =45)
plotData3$x
plotData2$x
forClustering <- as.matrix(cbind(x,y))
prova <- dbscan(forClustering, eps = 10, minPts = 3)
perPlot2 <- cbind(forClustering,prova$cluster,sampleCondition)
plotData2 <- data.frame(perPlot2)
ggplot(plotData2, aes(x = plotData2$x, y = plotData2$y), colors(distinct = TRUE), label = plotData2$sampleCondition) + geom_point(aes(colour = factor(prova.cluster), group = prova.cluster)) +geom_text(label = plotData2$sampleCondition, check_overlap = TRUE, hjust = 0, nudge_x = 0.05, angle =45)
ggplot(plotData2, aes(x = plotData2$x, y = plotData2$y), colors(distinct = TRUE), label = plotData2$sampleCondition) + geom_point(aes(colour = factor(V3), group = V3)) +geom_text(label = plotData2$sampleCondition, check_overlap = TRUE, hjust = 0, nudge_x = 0.05, angle =45)
plotData3[14,3] = 2
View(plotData3)
ggplot(plotData3, aes(x = plotData3$x, y = plotData3$y), colors(distinct = TRUE), label = plotData3$sampleCondition) + geom_point(aes(colour = factor(V3), group = V3)) + geom_text(label = plotData2$sampleCondition, check_overlap = TRUE, hjust = 0, nudge_x = 0.05, angle =45)
kmeans(forClustering, centers = 3)
kMeans = kmeans(forClustering, centers = 3)
ggplot(plotData3, aes(x = plotData3$x, y = plotData3$y), colors(distinct = TRUE), label = plotData3$sampleCondition) + geom_point(aes(colour = factor(V3), group = V3)) + geom_text(label = plotData3$sampleCondition, check_overlap = TRUE, hjust = 0, nudge_x = 0.05, angle =45)
perPlot2 <- cbind(forClustering,kMeans$cluster,sampleCondition)
plotData4 <- data.frame(perPlot2)
ggplot(plotData4, aes(x = plotData4$x, y = plotData4$y), colors(distinct = TRUE), label = plotData4$sampleCondition) + geom_point(aes(colour = factor(kMeans$cluster), group = kMeans$cluster)) + geom_text(label = plotData4$sampleCondition, check_overlap = TRUE, hjust = 0, nudge_x = 0.05, angle =45)
kMeans = kmeans(forClustering, centers = 4)
perPlot2 <- cbind(forClustering,kMeans$cluster,sampleCondition)
plotData4 <- data.frame(perPlot2)
ggplot(plotData4, aes(x = plotData4$x, y = plotData4$y), colors(distinct = TRUE), label = plotData4$sampleCondition) + geom_point(aes(colour = factor(kMeans$cluster), group = kMeans$cluster)) + geom_text(label = plotData4$sampleCondition, check_overlap = TRUE, hjust = 0, nudge_x = 0.05, angle =45)
kMeans = kmeans(forClustering, centers = 3)
perPlot2 <- cbind(forClustering,kMeans$cluster,sampleCondition)
plotData4 <- data.frame(perPlot2)
ggplot(plotData4, aes(x = plotData4$x, y = plotData4$y), colors(distinct = TRUE), label = plotData4$sampleCondition) + geom_point(aes(colour = factor(kMeans$cluster), group = kMeans$cluster)) + geom_text(label = plotData4$sampleCondition, check_overlap = TRUE, hjust = 0, nudge_x = 0.05, angle =45)
library(devtools)
usethis::use_rcpp()
devtools::load_all()
devtools::document()
check()
library(ISDBSCAN)
load("~/Scrivania/SImDataToUse.RData")
library(ISDBSCAN)
library(mbkmeans)
# for data viz
library(dplyr)
library(cowplot)
nC <- 1000  # number of cells
nG <- 500 # number of genes
sim_data <- simulate_gauss_mix(n_cells=nC, n_genes=nG)
# check dimension of observed data
dim(sim_data$obs_data)
# Plot the true cluster locations
ref.cols <- c("blue", "brown1", "gold2")
clust1 <- ref.cols[sim_data$true_cluster_id]
plot(sim_data$true_data, pch=16, cex=1.5, col=clust1,
main=paste0("True structure"))
isDbscanRes = ISDBSCAN(sim_data$obs_data, k = 24) #Forse k 20
unique(isDbscanRes$clusters)
isDbscanRes$clusters
sum(isDbscanRes$clusters==-2)
isDbscanRes = ISDBSCAN(sim_data$obs_data, k = 22) #Forse k 20
unique(isDbscanRes$clusters)
isDbscanRes$clusters
sum(isDbscanRes$clusters==-2)
isDbscanRes = ISDBSCAN(sim_data$obs_data, k = 21) #Forse k 20
unique(isDbscanRes$clusters)
isDbscanRes$clusters
sum(isDbscanRes$clusters==-2)
isDbscanRes = ISDBSCAN(sim_data$obs_data, k = 20) #Forse k 20
unique(isDbscanRes$clusters)
isDbscanRes$clusters
sum(isDbscanRes$clusters==-2)
isDbscanRes = ISDBSCAN(sim_data$obs_data, k = 25) #Forse k 20
unique(isDbscanRes$clusters)
isDbscanRes$clusters
sum(isDbscanRes$clusters==-2)
isDbscanRes = ISDBSCAN(sim_data$obs_data, k = 26) #Forse k 20, k25
unique(isDbscanRes$clusters)
isDbscanRes$clusters
sum(isDbscanRes$clusters==-2)
isDbscanRes = ISDBSCAN(sim_data$obs_data, k = 30) #Forse k 20, k25
unique(isDbscanRes$clusters)
isDbscanRes$clusters
sum(isDbscanRes$clusters==-2)
isDbscanRes = ISDBSCAN(sim_data$obs_data, k = 35) #Forse k 20, k25, 30
unique(isDbscanRes$clusters)
isDbscanRes$clusters
sum(isDbscanRes$clusters==-2)
isDbscanRes = ISDBSCAN(sim_data$obs_data, k = 40) #Forse k 20, k25, 30, 35
unique(isDbscanRes$clusters)
isDbscanRes$clusters
sum(isDbscanRes$clusters==-2)
isDbscanRes = ISDBSCAN(sim_data$obs_data, k = 50) #Forse k 20, k25, 30, 35,40
unique(isDbscanRes$clusters)
isDbscanRes$clusters
sum(isDbscanRes$clusters==-2)
isDbscanRes = ISDBSCAN(sim_data$obs_data, k = 60) #Forse k 20, k25, 30, 35,40
unique(isDbscanRes$clusters)
isDbscanRes$clusters
sum(isDbscanRes$clusters==-2)
isDbscanRes = ISDBSCAN(sim_data$obs_data, k = 80) #Forse k 20, k25, 30, 35,40, 50, 60
unique(isDbscanRes$clusters)
isDbscanRes$clusters
sum(isDbscanRes$clusters==-2)
isDbscanRes = ISDBSCAN(sim_data$obs_data, k = 100) #Forse k 20, k25, 30, 35,40, 50, 60, 80,
unique(isDbscanRes$clusters)
isDbscanRes$clusters
sum(isDbscanRes$clusters==-2)
isDbscanRes = ISDBSCAN(sim_data$obs_data, k = 120) #Forse k 20, k25, 30, 35,40, 50, 60, 80, 100
unique(isDbscanRes$clusters)
isDbscanRes$clusters
sum(isDbscanRes$clusters==-2)
clust1 <- ref.cols[isDbscanRes$clusters]
isDbscanRes$clusters[isDbscanRes$clusters==-2] = 99
unique(isDbscanRes$clusters)
clust1 <- ref.cols[isDbscanRes$clusters]
plot(sim_data$true_data, pch=16, cex=1.5, col=clust1,
main=paste0("True structure"))
ref.cols <- c("blue", "brown1", "gold2","green")
clust1 <- ref.cols[isDbscanRes$clusters]
plot(sim_data$true_data, pch=16, cex=1.5, col=clust1,
main=paste0("True structure"))
mbkmeans(t(sim_data$obs_data), clusters = 3)
kmeansRes = mbkmeans(t(sim_data$obs_data), clusters = 3)
ref.cols <- c("blue", "brown1", "gold2")
clust1 <- ref.cols[kmeansRes$Clusters]
plot(sim_data$true_data, pch=16, cex=1.5, col=clust1,
main=paste0("True structure"))
ref.cols <- c("blue", "brown1", "gold2","red")
clust1 <- ref.cols[isDbscanRes$clusters]
plot(sim_data$true_data, pch=16, cex=1.5, col=clust1,
main=paste0("True structure"))
sim_data$true_data
kmeansRes$Clusters
isDbscanRes$clusters
library(ggplot2)
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#000000")
plotData = data.frame(cbind(sim_data$true_data, isDbscanRes$clusters))
head(plotData)
ggplot(plotData, aes(x = plotData$X1, y = plotData$X2), colors(distinct = TRUE)) + geom_point(aes(colour = factor(X3), group = X3))
save.image("~/Scrivania/SImDataToUse.RData")
plotData = data.frame(cbind(sim_data$true_data, kmeansRes$Clusters))
ggplot(plotData, aes(x = plotData$X1, y = plotData$X2), colors(distinct = TRUE)) + geom_point(aes(colour = factor(X3), group = X3))
plotData1 = data.frame(cbind(sim_data$true_data, kmeansRes$Clusters))
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#000000")
ggplot(plotData1, aes(x = plotData1$X1, y = plotData1$X2), colors(distinct = TRUE)) + geom_point(aes(colour = factor(X3), group = X3))
plotData = data.frame(cbind(sim_data$true_data, isDbscanRes$clusters))
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#000000")
ggplot(plotData, aes(x = plotData$X1, y = plotData$X2), colors(distinct = TRUE)) + geom_point(aes(colour = factor(X3), group = X3))
save.image("~/Scrivania/Rpackage/dataset/SimDataResults.RData")
#kmeans a blocchi
kmeansRes = mbkmeans(t(sim_data$obs_data), clusters = 3, blocksize = 100)
#kmeans a blocchi
kmeansRes = mbkmeans(t(sim_data$obs_data), clusters = 3, batch_size = 100)
plotData1 = data.frame(cbind(sim_data$true_data, kmeansRes$Clusters))
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#000000")
ggplot(plotData1, aes(x = plotData1$X1, y = plotData1$X2), colors(distinct = TRUE)) + geom_point(aes(colour = factor(X3), group = X3))
#kmeans a blocchi
kmeansRes = mbkmeans(t(sim_data$obs_data), clusters = 3, batch_size = 250)
plotData1 = data.frame(cbind(sim_data$true_data, kmeansRes$Clusters))
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#000000")
ggplot(plotData1, aes(x = plotData1$X1, y = plotData1$X2), colors(distinct = TRUE)) + geom_point(aes(colour = factor(X3), group = X3))
#kmeans a blocchi
kmeansRes = mbkmeans(t(sim_data$obs_data), clusters = 3, batch_size = 500)
plotData1 = data.frame(cbind(sim_data$true_data, kmeansRes$Clusters))
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#000000")
ggplot(plotData1, aes(x = plotData1$X1, y = plotData1$X2), colors(distinct = TRUE)) + geom_point(aes(colour = factor(X3), group = X3))
#ISDBSCAN batch
isDbscanRes_batch1 = ISDBSCAN(sim_data$obs_data, k = 120, batch_size = 100) #Forse k 20, k25, 30, 35,40, 50, 60, 80, 100, 120
#ISDBSCAN batch
isDbscanRes_batch1 = ISDBSCAN(sim_data$obs_data, k = 120, batch_size = 100) #Forse k 20, k25, 30, 35,40, 50, 60, 80, 100, 120
#ISDBSCAN batch
isDbscanRes_batch1 = ISDBSCAN(sim_data$obs_data, k = 120, batch_size = 200) #Forse k 20, k25, 30, 35,40, 50, 60, 80, 100, 120
#ISDBSCAN batch
isDbscanRes_batch1 = ISDBSCAN(prova$obs_data, k = 3, batch_size = 2) #Forse k 20, k25, 30, 35,40, 50, 60, 80, 100, 120
nC <- 10  # number of cells
nG <- 3 # number of genes
prova <- simulate_gauss_mix(n_cells=nC, n_genes=nG)
#ISDBSCAN batch
isDbscanRes_batch1 = ISDBSCAN(prova$obs_data, k = 3, batch_size = 2) #Forse k 20, k25, 30, 35,40, 50, 60, 80, 100, 120
nC <- 100  # number of cells
nG <- 3 # number of genes
prova <- simulate_gauss_mix(n_cells=nC, n_genes=nG)
#ISDBSCAN batch
isDbscanRes_batch1 = ISDBSCAN(prova$obs_data, k = 3, batch_size = 10) #Forse k 20, k25, 30, 35,40, 50, 60, 80, 100, 120
#ISDBSCAN batch
isDbscanRes_batch1 = ISDBSCAN(prova$obs_data, k = 3, batch_size = 8) #Forse k 20, k25, 30, 35,40, 50, 60, 80, 100, 120
#ISDBSCAN batch
isDbscanRes_batch1 = ISDBSCAN(prova$obs_data, k = 3, batch_size = 7) #Forse k 20, k25, 30, 35,40, 50, 60, 80, 100, 120
#ISDBSCAN batch
isDbscanRes_batch1 = ISDBSCAN(prova$obs_data, k = 3, batch_size = 7) #Forse k 20, k25, 30, 35,40, 50, 60, 80, 100, 120
#ISDBSCAN batch
isDbscanRes_batch1 = ISDBSCAN(prova$obs_data, k = 3, batch_size = 6) #Forse k 20, k25, 30, 35,40, 50, 60, 80, 100, 120
#ISDBSCAN batch
isDbscanRes_batch1 = ISDBSCAN(prova$obs_data, k = 3, batch_size = 5) #Forse k 20, k25, 30, 35,40, 50, 60, 80, 100, 120
#ISDBSCAN batch
isDbscanRes_batch1 = ISDBSCAN(prova$obs_data, k = 3, batch_size = 4) #Forse k 20, k25, 30, 35,40, 50, 60, 80, 100, 120
#ISDBSCAN batch
isDbscanRes_batch1 = ISDBSCAN(prova$obs_data, k = 3, batch_size = 3) #Forse k 20, k25, 30, 35,40, 50, 60, 80, 100, 120
unique(isDbscanRes_batch1$clusters)
sum(isDbscanRes_batch1$clusters==-2)
isDbscanRes_batch1$clusters[isDbscanRes_batch1$clusters==-2] = 99
nC <- 10  # number of cells
nG <- 3 # number of genes
prova <- simulate_gauss_mix(n_cells=nC, n_genes=nG)
#ISDBSCAN batch
isDbscanRes_batch1 = ISDBSCAN(prova$obs_data, k = 3, batch_size = 3) #Forse k 20, k25, 30, 35,40, 50, 60, 80, 100, 120
#ISDBSCAN batch
isDbscanRes_batch1 = ISDBSCAN(prova$obs_data, k = 3, batch_size = 4) #Forse k 20, k25, 30, 35,40, 50, 60, 80, 100, 120
save.image("~/Scrivania/Rpackage/dataset/SimDataResults.RData")
library(ISDBSCAN)
nC <- 10  # number of cells
nG <- 3 # number of genes
prova <- simulate_gauss_mix(n_cells=nC, n_genes=nG)
#ISDBSCAN batch
isDbscanRes_batch1 = ISDBSCAN(prova$obs_data, k = 3, batch_size = 4) #Forse k 20, k25, 30, 35,40, 50, 60, 80, 100, 120
library(ISDBSCAN)
#ISDBSCAN batch
isDbscanRes_batch1 = ISDBSCAN(prova$obs_data, k = 3, batch_size = 4) #Forse k 20, k25, 30, 35,40, 50, 60, 80, 100, 120
#ISDBSCAN batch
isDbscanRes_batch1 = ISDBSCAN(prova$obs_data, k = 3, batch_size = 6) #Forse k 20, k25, 30, 35,40, 50, 60, 80, 100, 120
#ISDBSCAN batch
isDbscanRes_batch1 = ISDBSCAN(prova$obs_data, k = 3, batch_size = 8) #Forse k 20, k25, 30, 35,40, 50, 60, 80, 100, 120
#ISDBSCAN batch
isDbscanRes_batch1 = ISDBSCAN(prova$obs_data, k = 3, batch_size = 8) #Forse k 20, k25, 30, 35,40, 50, 60, 80, 100, 120
#ISDBSCAN batch
isDbscanRes_batch1 = ISDBSCAN(prova$obs_data, k = 3, batch_size = 9) #Forse k 20, k25, 30, 35,40, 50, 60, 80, 100, 120
#ISDBSCAN batch
isDbscanRes_batch1 = ISDBSCAN(prova$obs_data, k = 3, batch_size = 4) #Forse k 20, k25, 30, 35,40, 50, 60, 80, 100, 120
library(ISDBSCAN)
library(mbkmeans)
library(ggplot2)
ggplot(plotData, aes(x = plotData$X1, y = plotData$X2), colors(distinct = TRUE)) + geom_point(aes(colour = factor(X3), group = X3))
#kmeans
kmeansRes = mbkmeans(t(sim_data$obs_data), clusters = 3)
plotData1 = data.frame(cbind(sim_data$true_data, kmeansRes$Clusters))
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#000000")
ggplot(plotData1, aes(x = plotData1$X1, y = plotData1$X2), colors(distinct = TRUE)) + geom_point(aes(colour = factor(X3), group = X3))
#ISDBSCAN batch
isDbscanRes_batch1 = ISDBSCAN(sim_data$obs_data, k = 120, batch_size = 100) #Forse k 20, k25, 30, 35,40, 50, 60, 80, 100, 120
unique(isDbscanRes_batch1$clusters)
sum(isDbscanRes_batch1$clusters==-2)
isDbscanRes_batch1$clusters[isDbscanRes_batch1$clusters==-2] = 99
plotData = data.frame(cbind(sim_data$true_data, isDbscanRes_batch1$clusters))
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#000000")
ggplot(plotData, aes(x = plotData$X1, y = plotData$X2), colors(distinct = TRUE)) + geom_point(aes(colour = factor(X3), group = X3))
plotData = data.frame(cbind(sim_data$true_data, isDbscanRes$clusters))
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#000000")
ggplot(plotData, aes(x = plotData$X1, y = plotData$X2), colors(distinct = TRUE)) + geom_point(aes(colour = factor(X3), group = X3))
plotData = data.frame(cbind(sim_data$true_data, isDbscanRes_batch1$clusters))
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#000000")
ggplot(plotData, aes(x = plotData$X1, y = plotData$X2), colors(distinct = TRUE)) + geom_point(aes(colour = factor(X3), group = X3))
#ISDBSCAN batch
isDbscanRes_batch1 = ISDBSCAN(sim_data$obs_data, k = 120, batch_size = 250) #Forse k 20, k25, 30, 35,40, 50, 60, 80, 100, 120
unique(isDbscanRes_batch1$clusters)
sum(isDbscanRes_batch1$clusters==-2)
isDbscanRes_batch1$clusters[isDbscanRes_batch1$clusters==-2] = 99
plotData = data.frame(cbind(sim_data$true_data, isDbscanRes_batch1$clusters))
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#000000")
ggplot(plotData, aes(x = plotData$X1, y = plotData$X2), colors(distinct = TRUE)) + geom_point(aes(colour = factor(X3), group = X3))
#kmeans a blocchi
kmeansRes = mbkmeans(t(sim_data$obs_data), clusters = 3, batch_size = 100)
plotData1 = data.frame(cbind(sim_data$true_data, kmeansRes$Clusters))
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#000000")
ggplot(plotData1, aes(x = plotData1$X1, y = plotData1$X2), colors(distinct = TRUE)) + geom_point(aes(colour = factor(X3), group = X3))
#kmeans a blocchi
kmeansRes = mbkmeans(t(sim_data$obs_data), clusters = 3, batch_size = 250)
plotData1 = data.frame(cbind(sim_data$true_data, kmeansRes$Clusters))
cbPalette <- c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7", "#000000")
ggplot(plotData1, aes(x = plotData1$X1, y = plotData1$X2), colors(distinct = TRUE)) + geom_point(aes(colour = factor(X3), group = X3))
save.image("~/Scrivania/Rpackage/dataset/SimDataResults.RData")
